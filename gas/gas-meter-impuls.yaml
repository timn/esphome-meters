esp8266:
  board: d1_mini
  restore_from_flash: true

esphome:
  name: "gasmeter-impctr"
  friendly_name: Gas Meter Impuls

  on_boot:
    then:
    - pulse_meter.set_total_pulses:
        id: gas_pulse_counter
        value: !lambda "return id(gas_total_pulses);"
    - logger.log:
        format: "Restored pulses %d, total %.3f"
        args: [ 'id(gas_total_pulses)', 'id(gas_total).state' ]
  on_shutdown:
    then:
    - globals.set:
        id: gas_total_pulses
        value: !lambda "return id(gas_total).raw_state;"
    - logger.log:
        format: "Stored pulses %d, total %.3f"
        args: [ 'id(gas_total_pulses)', 'id(gas_total).state' ]

preferences:
  flash_write_interval: 15 minutes

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

  services:
    - service: set_gas_total
      variables:
        m3: float
      then:
      - pulse_meter.set_total_pulses:
          id: gas_pulse_counter
          value: !lambda return m3 * 100;

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

globals:
  - id: gas_total_pulses
    type: int
    restore_value: true
    # You can set this on when first flashing to start with a meaningful value
    # initial_value: "0"

binary_sensor:
  # This is an optional sensor that can be used to see when the inductive
  # sensor registers a signal via Home Assistant.
  - platform: gpio
    id: live_impulse
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
    name: "Live Impuls"
    filters:
      - delayed_on: 100ms
    on_press:
      then:
        - output.turn_on: led
    on_release:
      then:
        - output.turn_off: led

sensor:
  # This is configurd for meter that gives 1 impuls for every 0.01m³ of gas.
  # The internal filter is used to only count if the signal is on for at
  # least the configured time.
  - platform: pulse_meter
    id: gas_pulse_counter
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
    unit_of_measurement: m³/hour
    name: Gas usage
    internal_filter: 100ms
    internal_filter_mode: PULSE
    accuracy_decimals: 3
    filters:
      - lambda: return x * (60.0 / 100);
    total:
      name: Gas total
      id: gas_total
      unit_of_measurement: m³
      accuracy_decimals: 3
      state_class: "total_increasing"
      icon: mdi:fire
      device_class: gas
      filters:
      - lambda: |-
          id(gas_total_pulses) = x;
          return (x * 1.0) / 100;

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

# Sync LED to live impulse
output:
  - platform: gpio
    pin:
      # This is the builtin LED
      number: GPIO2
      inverted: true
    id: 'led'
